import basil.*

apply plugin: 'com.android.application'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "com.jaredsburrows.spoon"
apply plugin: 'com.github.triplet.play'

android {
  compileSdkVersion 28
  defaultConfig {
    applicationId "ie.pennylabs.x.basil"
    minSdkVersion 21
    targetSdkVersion 28
    versionCode BuildConst.Version.code
    versionName BuildConst.Version.name
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    archivesBaseName = "basil-$versionName"

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }

  sourceSets {
    androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
  }

  signingConfigs {
    if (file('../signing/release.keystore').exists()) {
      release {
        storeFile file(Keystore.RELEASE_STORE)
        storePassword Keystore.STORE_PASSWORD
        keyAlias Keystore.KEY_ALIAS
        keyPassword Keystore.KEY_PASSWORD
      }
    }

    debug {
      storeFile file('../signing/debug.keystore')
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
      applicationIdSuffix '.debug'
    }

    release {
      if (file('../signing/release.keystore').exists()) {
        signingConfig signingConfigs.release
      } else {
        signingConfig signingConfigs.debug
      }
      postprocessing {
        proguardFiles 'proguard-rules.pro'
        removeUnusedResources = true
        removeUnusedCode = true
        optimizeCode = true
        obfuscate = false
      }
    }
  }

  testOptions {
    animationsDisabled = true
  }
}

if (file('../signing/play.json').exists()) {
  play {
    serviceAccountCredentials = file("../signing/play.json")
    defaultToAppBundles = true
    track = 'internal'
  }
}

spoon {
  baseOutputDir = "$project.buildDir/reports/androidTests/spoon"
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$Deps.kotlin"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${Deps.coroutines}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:${Deps.coroutines}"

  implementation 'com.google.android.material:material:1.0.0-rc01'
  implementation 'androidx.appcompat:appcompat:1.0.0-rc02'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation "androidx.lifecycle:lifecycle-livedata:2.0.0-rc01"
  implementation "androidx.room:room-runtime:$Deps.room"
  kapt "androidx.room:room-compiler:$Deps.room"
  implementation 'androidx.core:core-ktx:1.0.0-rc02'

  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'com.squareup.moshi:moshi-kotlin:1.6.0'
  implementation "com.google.dagger:dagger:$Deps.dagger"
  implementation "com.google.dagger:dagger-android:$Deps.dagger"
  kapt "com.google.dagger:dagger-compiler:$Deps.dagger"
  kapt "com.google.dagger:dagger-android-processor:$Deps.dagger"

  testImplementation 'junit:junit:4.12'
  androidTestImplementation "androidx.test:rules:$Deps.androidx_test"
  androidTestImplementation "androidx.test:runner:$Deps.androidx_test"
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha3', {
    exclude group: 'androidx.annotations', module: 'annotations'
  }
  androidTestImplementation "com.jraska:falcon:$Deps.falcon"
  androidTestImplementation "com.jraska:falcon-spoon-compat:$Deps.falcon"
  androidTestImplementation "com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT"
}

kotlin {
  experimental {
    coroutines 'enable'
  }
}
androidExtensions {
  experimental = true
}
kapt {
  useBuildCache = true
}

check.dependsOn rootProject.detektCheck

task prepareNextRelease {
  description "Prepares the project for the next release version, see: RELEASING.md"

  doLast {
    def new_version = project.android.defaultConfig.versionName

    // 7. Create a new release branch `git checkout -b release-{versionName}`
    exec { commandLine 'git', 'checkout', '-b', "release-$new_version" }
    exec {
      // 8. Update previous `CHANGELOG.md` entry to append title with the build commit of that release
      commandLine 'sed', '-i', "", '-e', "1 s/\$/ - ${BuildConst.Git.shortHash}/", file('../CHANGELOG.md')
    }

    // 9. Commit changes `git commit -am 'bump version to {versionName}'`
    exec { commandLine 'git', 'commit', '-am', "bump version to $new_version" }
  }
}